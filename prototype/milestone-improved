#!/usr/bin/env bash

#******************************************************************************
# configuration variables
tab_size=4
no_color_option=false
#
# parameter variables
usage_option=false
version_option=false
query_option=
score_option=false
write_note_option=false
list_note_option=false
check_node_option=
mark_done_option=
mark_undone_option=
progress_option=
debug_option=false
tutorial_option=false
add_task_option=false
remove_task_option=
change_task_option=

#******************************************************************************
# Functions

## description: outputs string with style and color
## usage: show [style/color] [string] ... [string]
## style list:
##     default normal bold italic strike-through blink
##     inline newline space align
## color list: black red green yellow blue magenta cyan white
## note: only the last attribute in consecutive attributes is affected
## note: inline and newline attributes affect the whole line
## note: to align next lines, use &align in string
show() {
	local output_style=sgr0
	local output_color=
	local trailing_newline=true

	# empty show will only print newline
	if [ $# -eq 0 ]; then echo; return; fi
	
	# attributes are interpreted before or between strings
	# FIXME: interpret attribute as string when needed
	while [ $# -gt 0 ]; do
		case $1 in
			# styles
			bold) output_style=$1 ;;
			normal|default) output_style=sgr0; output_color= ;;
			italic) output_style=sgr0 ;;
			strike-through) output_style=sgr0 ;;
			dim) output_style=$1 ;;
			inline) trailing_newline=false ;;
			newline) echo ;;
			blink) output_style=sgr0 ;;
			space) echo -n " " ;;
			align)
				if [ $alignment_position -gt 0 ]; then
					printf "%.0s " $(seq 2 $alignment_position)
				fi
				;;
			# colors
			black) output_color=0 ;;
			red) output_color=1 ;;
			green) output_color=2 ;;
			yellow) output_color=3 ;;
			blue) output_color=4 ;;
			magenta) output_color=5 ;;
			cyan) output_color=6 ;;
			white) output_color=7 ;;
			# string
			*)
				# set output style first, then coloring
				tput $output_style
				if [ -n "$output_color" ] && ! $no_color_option; then
					tput setaf $output_color
				fi

				# store alignment position globally for next function execution
				local margin=$(awk -F"&align" '{print $1}' <<< $1 | wc -m)
				local output_string=$1
				if [ $margin -lt ${#1} ]; then
					alignment_position=$margin
					output_string=$(sed 's/\\ *&align\ */\ /g' <<< $1)
				elif [ -z "$alignment_position" ]; then
					alignment_position=0
				fi

				echo -ne "$output_string"
				;;
		esac
		shift
	done
	
	# trailing newline is set unless inline attribute given
	if $trailing_newline; then echo; fi

	# reset to defaults
	tput sgr0
}

version() {
	show "Milestone v0.0.1 (beta)"
}

usage() {
	version
	show
	show bold "General Options"
	show
	show blue "-h, --help" space normal "get help and usage"
	show blue "--tutorial" space normal "start milestone tutorial"
	show blue "-v, --version" space normal "get current milestone version"
	show blue inline "-t [size=4], --tab, --tab-size"
	show space "set tab size in milestone output"
	show blue "--no-color" space normal "disable output coloring"
	show blue "--debug" space normal "enable debug mode"
	show
	show bold "Note Options"
	show
	show blue "-w, --write-notes" space normal "write daily notes"
	show blue "-n [note number], --list-notes" space normal "list daily notes"
	show blue inline "-c [note number], --check-note"
	show space "check note in list"
	show
	show bold "Practice Options"
	show
	show blue "-a, --add-task" space normal "add a task"
	show blue "-r [task], --remove-task" space normal "remove a task"
	show blue "-q [task], --query" space normal "query task"
	show blue inline "-d [task], --done, --mark-done"
	show space "mark task as done"
	show blue inline "-D [task], --undone, --mark-not_done"
	show space "mark task as not done"
	show blue inline "-p [-/+ progress=1] [task],"
   	show blue inline space "--progress, --set-progress"
	show space "record progress on task"
	show blue "-s, --score" space normal "see current score of task"
}

usage_error() {
	show bold "milestone error"
}

tutorial() {
	usage_error
}

write_note() {
	usage_error
}

list_notes() {
	usage_error
}

check_note() {
	usage_error
}

add_task() {
	usage_error
}

remove_task() {
	usage_error
}

mark_done() {
	usage_error
}

mark_undone() {
	usage_error
}

set_progress() {
	usage_error
}

change_task() {
	usage_error
}

query_task() {
	usage_error
}

score_practice() {
	usage_error
}

#******************************************************************************
# Options Parser
if [ $# -eq 0 ]; then
	usage
fi

parameters=$(getopt -n $0 -o 'hvq:swnc:d:D:p:t:ar:'\
	--long 'help,version,query:,score,write-notes,list-notes,check-note:'\
	',done:,mark-done:,undone:,mark-not-done:,set-progress:,progress:,tab'\
	':,tab-size:,no-color,debug,add-task,remove-task,tutorial,change-task'\
   	-- "$@")
if [ $? -ne 0 ]; then exit 1; fi
eval set -- "$parameters"
unset parameters

while true; do
	case "$1" in
	# general options
		-h|--help) usage_option=true ;;
		--tutorial) tutorial_option=true ;;
		-v|--version) version_option=true ;;
	# note options
		-w|--write-notes) write_note_option=true ;;
		-n|--list-notes) list_note_option=true ;;
		-c|--check-note) check_node_option="$2"; shift ;;
	# task options
		-a|--add-task) add_task_option=true ;;
		-r|--remove-task) remove_task_option="$2"; shift ;;
		-d|--done|--mark-done) mark_done_option="$2"; shift ;;
		-D|--undone|--mark-not_done) mark_undone_option="$2"; shift ;;
		-p|--progress|--set-progress) progress_option="$2"; shift ;;
		--change-task) change_task_option="$2"; shift ;;
		-q|--query) query_option="$2"; shift ;;
		-s|--score) score_option=true ;;
	# adjustment options
		-t|--tab|--tab-size) tab_size=$2; shift ;;
		--no-color) no_color_option=true ;;
		--debug) debug_option=true ;;
	# getopt specific value
		--) break ;;
		*) show bold "Invalid option!"; usage_option; exit ;;
	esac
	shift
done

# priority 20
# priority 10
# priority 0
if $usage_option; then usage; exit; fi
if $tutorial_option; then tutorial; exit; fi
if $version_option; then version; exit; fi
if $write_note_option; then write_note; fi
if $list_note_option; then list_notes; fi
if [ -n "$check_note_option" ]; then check_note "$check_note_option"; fi
if $add_task_option; then add_task; fi
if [ -n "$remove_task_option" ]; then remove_task "$remove_task_option"; fi
if [ -n "$mark_done_option" ]; then mark_done "$mark_done"; fi
if [ -n "$mark_undone_option" ]; then mark_undone "$mark_undone_option"; fi
if [ -n "$progress_option" ]; then set_progress "$progress_option"; fi
if [ -n "$change_task_option" ]; then change_task "$change_task_option"; fi
if [ -n "$query_option" ]; then query_task "$query_option"; fi
if $score_option; then score_practice; fi
