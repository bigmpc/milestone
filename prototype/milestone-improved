#!/usr/bin/env bash

#*******************************************************************************
# Global variables used for options
tab_size=4
no_color_option=false

#*******************************************************************************
# Functions

## description: outputs string with style and color
## usage: show [style/color] [string] ... [string]
## style list:
##     default normal bold italic strike-through blink
##     inline newline space align
## color list: black red green yellow blue magenta cyan white
## note: only the last attribute in consecutive attributes is affected
## note: inline and newline attributes affect the whole line
## note: to align next lines, use &align in string
show() {
	local output_style=sgr0
	local output_color=
	local trailing_newline=true

	# empty show will only print newline
	if [ $# -eq 0 ]; then
		echo
		return
	fi
	
	# attributes are interpreted before or between strings
	# FIXME: interpret attribute as string when needed
	while [ $# -gt 0 ]; do
		case $1 in
			# styles
			bold) output_style=$1 ;;
			normal|default)
				output_style=sgr0
				output_color=
				;;
			italic) output_style=sgr0 ;;
			strike-through) output_style=sgr0 ;;
			dim) output_style=$1 ;;
			inline) trailing_newline=false ;;
			newline) echo ;;
			blink) output_style=sgr0 ;;
			space) echo -n " " ;;
			align)
				if [ $alignment_position -gt 0 ]; then
					printf "%.0s " $(seq 2 $alignment_position)
				fi
				;;
			# colors
			black) output_color=0 ;;
			red) output_color=1 ;;
			green) output_color=2 ;;
			yellow) output_color=3 ;;
			blue) output_color=4 ;;
			magenta) output_color=5 ;;
			cyan) output_color=6 ;;
			white) output_color=7 ;;
			# string
			*)
				# set output style first, then coloring
				tput $output_style
				if [ -n "$output_color" ] && ! $no_color_option; then
					tput setaf $output_color
				fi

				# store alignment position globally for next function execution
				local margin=$(awk -F"&align" '{print $1}' <<< $1 | wc -m)
				local output_string=$1
				if [ $margin -lt ${#1} ]; then
					alignment_position=$margin
					output_string=$(sed 's/\&align//g' <<< $1)
				elif [ -z "$alignment_position" ]; then
					alignment_position=0
				fi

				echo -ne "$output_string"
				;;
		esac
		shift
	done
	
	# trailing newline is set unless inline attribute given
	if $trailing_newline; then echo; fi

	# reset to defaults
	tput sgr0
}

version() {
	show "Milestone v0.0.1 (beta)"
}

usage() {
	version
	show
	show bold "General Options"
	show
	show blue "-h, --help" space normal "get help and usage"
	show blue "-v, --version" space normal "get current milestone version"
	show blue inline "-t [size=4], --tab, --tab-size"
	show space "set tab size in milestone output"
	show blue "--no-color" space normal "disable output coloring"
	show blue "--debug" space normal "enable debug mode"
	show
	show bold "Note Options"
	show
	show blue "-w, --write-notes" space normal "write daily notes"
	show blue "-n [note number], --list-notes" space normal "list daily notes"
	show blue inline "-c [note number], --check-note"
	show space "check note in list"
	show
	show bold "Practice Options"
	show
	show blue "-q [practice name], --query" space normal "query practice"
	show blue inline "-d [practice name], --done, --mark-done"
	show space "mark practice as done"
	show blue inline "-D [practice name], --undone, --mark-not_done"
	show space "mark practice as not done"
	show blue inline "-p [-/+ progress=1] [practice name],"
   	show blue inline space "--progress, --set-progress"
	show space "record progress on practice"
	show blue "-s, --score" space normal "see current score of practices"
}

usage_error() {
	show bold "milestone error"
}

#*******************************************************************************
# Options Parser
if [ $# -eq 0 ]; then
	usage
fi

while [ $# -gt 0 ]; do
	case $1 in
		# general options
		-h|--help)
			usage
			exit
			;;
		-v|--version)
			version
			exit
			;;
		# practice options
		-q|--query)
			query_option=true
			;;
		-s|--score)
			score_option=true
			;;
		# note options
		-w|--write-notes)
			write_note_option=true
			;;
		-n|--list-notes)
			list_note_option=true
			;;
		-c|--check-note)
			check_node_option=true
			;;
		# editing options
		-d|--done|--mark-done)
			mark_done_option=true
			;;
		-D|--undone|--mark-not_done)
			mark_undone_option=true
			;;
		-p|--progress|--set-progress)
			progress_option=true
			;;
		# adjustment options
		-t|--tab|--tab-size)
			tab_size=$2
			;;
		--no-color)
			no_color_option=true
			;;
		--debug)
			debug_option=true
			;;
		*)
			show bold "Invalid option!"
			usage
			exit
			;;
	esac
	shift
done
